# https://doc.rust-lang.org/cargo/reference/manifest.html

[package]
name = "rust"
version = "0.14.2"
edition = "2021"

authors = ["Tyler St. Onge <tyler@stonge.dev>"]
description = "Hand-written implementations in Rust for personal reference"
license = "Unlicense"

readme = "README.md"
repository = "https://github.com/oddnerd/rust"

keywords = ["reference"]
categories = ["algorithms", "data-structures", "rust-patterns", "mathematics"]

publish = false

[dependencies]

# None!

[profile.release]
strip = true      # Strip debug info _and_ symbols.
lto = true        # Enable link-time optimization across crate boundaries.
codegen-units = 1 # Single threaded compilation for more optimization.

[lints.rust]
# https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html

missing_abi                    = "warn" # Prefer explicit ABI linkage.
missing_docs                   = "warn" # Require documenting public items.
trivial_casts                  = "warn" # Prefer coercion over explicit cast.
ffi_unwind_calls               = "warn" # Prevent using unwinding ABIs.
unused_lifetimes               = "warn" # Prevent naming inferable lifetimes.
unused_macro_rules             = "warn" # Prevent unused `macro_rules`.
let_underscore_drop            = "warn" # Prevent expensive implicit dropping.
single_use_lifetimes           = "warn" # Prefer placeholder lifetime.
meta_variable_misuse           = "warn" # Prevent undeclared in macros.
macro_use_extern_crate         = "warn" # Prefer explicitly importing macros.
variant_size_differences       = "warn" # Prevent big variant memory disparity.
unused_crate_dependencies      = "warn" # Prevent unused dependencies.
missing_copy_implementations   = "warn" # Prefer deriving `Copy`.
missing_debug_implementations  = "warn" # Debug formatting for public items.
explicit_outlives_requirements = "warn" # Prefer lifetimes on types.

unit_bindings                          = "deny" # Prevent binding variables to unit type.
unused_results                         = "deny" # Prefer explicitly handling `Result`.
unreachable_pub                        = "deny" # Prevent inaccessible public items.
non_ascii_idents                       = "deny" # Prefer ASCII source code.
unstable_features                      = "deny" # Prevent unstable features.
unused_qualifications                  = "deny" # Prefer names in scope.
trivial_numeric_casts                  = "deny" # Prevent casting to same type.
unsafe_op_in_unsafe_fn                 = "deny" # Require unsafe block in unsafe function.
elided_lifetimes_in_paths              = "deny" # Prefer explicit lifetimes.
absolute_paths_not_starting_with_crate = "deny" # Prefer `crate::`.

[lints.clippy]
# https://rust-lang.github.io/rust-clippy/master/index.html

# Cargo Configuration.
cargo_common_metadata   = "deny" # Require declaring package metadata.
negative_feature_names  = "deny" # Prefer features which add functionally.
redundant_feature_names = "deny" # Prevent feature names including feature.

# Prefer good coding practices over technically valid code.
pedantic = { level = "warn", priority = -1 }

# Dependencies
wildcard_dependencies    = "deny" # Prefer specific dependency version.
unnecessary_self_imports = "deny" # Prevent importing `::{self}`.

# Namespaces
unused_trait_names    = "deny" # Prefer `use Trait as _`.
std_instead_of_core   = "deny" # Prefer using `core` over `std` module.
std_instead_of_alloc  = "deny" # Prefer using `alloc` over `std` module.
alloc_instead_of_core = "deny" # Prefer using `core` over `alloc` module.

# Modules
pub_without_shorthand     = "deny" # Prevent using `in`.
self_named_module_files   = "deny" # Prefer 'mod.rs'.
tests_outside_test_module = "deny" # Prevent tests outside dedicated module.

# Documentation
too_long_first_doc_paragraph  = "deny" # Prefer brief description before detail.
missing_docs_in_private_items = "warn" # Require documenting private items.
empty_line_after_doc_comments = "deny" # Prevent space after documentation.

# Types
ref_option                        = "warn" # Prefer `Option<&T>` over `&Option<T>`.
same_name_method                  = "warn" # Prefer uniquely named methods.
partial_pub_fields                = "warn" # Prefer interfaces and POD types.
default_union_representation      = "warn" # Prefer C ABI unions over Rust's.
empty_drop                        = "deny" # Prevent empty destructors.
mutex_integer                     = "deny" # Prefer atomics over mutex.
multiple_inherent_impl            = "deny" # Prevent multiple impl blocks.
let_underscore_untyped            = "deny" # Prefer ignoring type alongside value.
unneeded_field_pattern            = "deny" # Prefer `..` over `_`.
redundant_type_annotations        = "deny" # Prevent repeating type.
unseparated_literal_suffix        = "deny" # Prevent literal suffix without underscore.
empty_structs_with_brackets       = "deny" # Prevent empty struct body.
trait_duplication_in_bounds       = "deny" # Prevent duplicating traits.
rest_pat_in_fully_bound_structs   = "deny" # Prevent non-binding elipses.
empty_enum_variants_with_brackets = "deny" # Prevent empty enum varients.

# Casting
as_underscore          = "warn" # Prefer explicit type over `as _`.
pattern_type_mismatch  = "warn" # Prevent implicit casts in pattern matching.
ref_as_ptr             = "deny" # Prefer `from_ref()` and `from_mut()`.
non_zero_suggestions   = "deny" # Prevent casting `NonZero` to integer and back.
as_pointer_underscore  = "deny" # Prevent `as *const _` and `as *mut _`.
fn_to_numeric_cast_any = "deny" # Prevent casting function pointers.

# Error Handling
unwrap_used                 = "warn" # Prevent `unwrap()`.
expect_used                 = "warn" # Prevent `expect()`.
indexing_slicing            = "warn" # Prefer failable `get` over indexing.
option_if_let_else          = "warn" # Prefer `map_or()` amd `map_or_else()`.
if_then_some_else_none      = "warn" # Prefer Boolean `then`.
assertions_on_result_states = "warn" # Prevent asserting `is_ok` and `is_err`.
try_err                     = "deny" # Prevent using question mark on error.
unused_result_ok            = "deny" # Prevent ignoring result via `ok()`.
error_impl_error            = "deny" # Prevent error names including error.
panic_in_result_fn          = "deny" # Prefer erroring instead of panic.
missing_assert_message      = "deny" # Require explanation for asserts.

# Debugging
todo                       = "warn" # Prevent `todo!()`.
dbg_macro                  = "warn" # Prevent `dbg!()`.
use_debug                  = "warn" # Prevent `{:?}` formatting.
print_stderr               = "warn" # Prevent `eprintln!()`.
print_stdout               = "warn" # Prevent `prinln!()`.
unimplemented              = "deny" # Prevent `unimplemented!()`.
debug_assert_with_mut_call = "deny" # Prevent debug/release divergence.

# Misleading
rc_mutex                             = "warn" # Prevent `Rc<Mutex>`.
rc_buffer                            = "warn" # Prevent `Rc<Vec/String>`.
mutex_atomic                         = "warn" # Prefer atomics over mutex.
suboptimal_flops                     = "warn" # Prefer float functions.
or_fun_call                          = "deny" # Prefer `or_else()`.
manual_clamp                         = "deny" # Prefer `clamp`.
str_to_string                        = "deny" # Prefer `to_owned()`.
clone_on_ref_ptr                     = "deny" # Prefer `Rc::clone()`.
string_to_string                     = "deny" # Prefer `clone()`.
assigning_clones                     = "deny" # Prefer `clone_from()`.
equatable_if_let                     = "deny" # Prevent Yoda (backwards) conditions.
used_underscore_items                = "deny" # Prevent using symbols lead by underscoe.
manual_is_power_of_two               = "deny" # Prefer `is_power_of_two()`.
suspicious_xor_used_as_pow           = "deny" # Prevent XOR decimal numbers.
empty_line_after_outer_attr          = "deny" # Prevent space after attributes.
derive_partial_eq_without_eq         = "deny" # Prefer deriving `Eq` alongside `PartialEq`.
map_with_unused_argument_over_ranges = "deny" # Prefer `std::iter::repeat`.

# Safety
unnecessary_safety_doc        = "deny" # Prevent safety section on safe method.
undocumented_unsafe_blocks    = "deny" # Require safety comment on unsafe code.
unnecessary_safety_comment    = "deny" # Prevent safety commnet on unsafe code.
multiple_unsafe_ops_per_block = "deny" # Prefer seperate unsafe blocks.

# Strings
string_slice                        = "warn" # Prevent naively slicing UTF-8.
non_ascii_literal                   = "warn" # Restrict literals to ASCII.
literal_string_with_formatting_args = "warn" # Prevent literals with formatting.
format_push_string                  = "deny" # Prefer `write!()`.
needless_raw_strings                = "deny" # Prefer plain literals.
string_lit_chars_any                = "deny" # Prefer `matches!()`.
unnecessary_literal_bound           = "deny" # Prevent limiting literal lifetime.

# Restricted Features
field_scoped_visibility_modifiers = "warn" # Prefer visibility of struct.
exit                              = "deny" # Prevent crashing via `exit`.
mem_forget                        = "deny" # Prevent leaking memory.
ref_patterns                      = "deny" # Prevent using `ref` keyword.
cfg_not_test                      = "deny" # Prevent configurations exluding test.
infinite_loop                     = "deny" # Prevent infinite loops.
wildcard_enum_match_arm           = "deny" # Prevent wildcard match branch.
large_stack_frames                = "deny" # Prefer large heap allocations.

# Miscellaneous/Style
imprecise_flops                = "warn" # Prefer accurate floating point math.
verbose_file_reads             = "warn" # Prefer reading via filesystem.
lossy_float_literal            = "warn" # Prevent unstorable float literals.
cognitive_complexity           = "warn" # Prefer small/simple methods.
branches_sharing_code          = "warn" # Prevent code duplication.
set_contains_or_insert         = "warn" # Prefer checking the result of `insert`.
arithmetic_side_effects        = "warn" # Prevent implicit underflow/overflow.
let_underscore_must_use        = "warn" # Prevent ignoring must use.
needless_pass_by_ref_mut       = "warn" # Prefer immutable borrow.
shadow_unrelated               = "deny" # Prevent name shadowing.
useless_let_if_seq             = "deny" # Prefer inline if/else assignment.
else_if_without_else           = "deny" # Prevent else if without else.
semicolon_inside_block         = "deny" # Prefer semicolon after block.
mixed_read_write_in_expression = "deny" # Prefer explicit order of assignments.

[lints.rustdoc]
# https://doc.rust-lang.org/rustdoc/lints.html

unescaped_backticks      = "deny" # Detect unmatched backticks.
missing_crate_level_docs = "warn" # Crate level documentation must exist.
